require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProjectTasksController do

  # This should return the minimal set of attributes required to create a valid
  # ProjectTask. As you add validations to ProjectTask, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
    it "assigns all project_tasks as @project_tasks" do
      project_task = ProjectTask.create! valid_attributes
      get :index
      assigns(:project_tasks).should eq([project_task])
    end
    

 end   

  describe "GET show" do
    it "assigns the requested project_task as @project_task" do
      project_task = ProjectTask.create! valid_attributes
      get :show, :id => project_task.id.to_s
      assigns(:project_task).should eq(project_task)
    end
    
      
      before(:each) do
        @project_task = Factory(:project_task)
      end          
      it "should be successfull" do
      get :show, :id => @project_task
      response.should be_successful
    end
      it "should find the right task" do
      get :show, :id => @project_task
      assigns(:project_task).should == @project_task
    end
 
 
  end

  describe "GET new" do
    it "assigns a new project_task as @project_task" do
      get :new
      assigns(:project_task).should be_a_new(ProjectTask)
    end
  end

  describe "GET edit" do
    it "assigns the requested project_task as @project_task" do
      project_task = ProjectTask.create! valid_attributes
      get :edit, :id => project_task.id.to_s
      assigns(:project_task).should eq(project_task)
    end
  end

  describe "POST create" do
              describe "success" do
                  
                  before(:each) do
                    @task = {:project_id => "Project1", :task_name => "New Task"}
                    
                  end
                  
                  it "should create a task" do
                    lambda do 
                      post :create, :project_tasking => @task
                    end.should change(ProjectTask, :count).by(1)
                  end
                  
                it "should show a notice saying 'Project task was successfully created.'" do
                post :create, :project_task => @task  
                flash[:notice].should =~ /Project task was successfully created./i 
                   end             
                end

            
    describe "with valid params" do
      it "creates a new ProjectTask" do
        expect {
          post :create, :project_task => valid_attributes
        }.to change(ProjectTask, :count).by(1)
      end

      it "assigns a newly created project_task as @project_task" do
        post :create, :project_task => valid_attributes
        assigns(:project_task).should be_a(ProjectTask)
        assigns(:project_task).should be_persisted
      end

      it "redirects to the created project_task" do
        post :create, :project_task => valid_attributes
        response.should redirect_to(ProjectTask.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved project_task as @project_task" do
        # Trigger the behavior that occurs when invalid params are submitted
        ProjectTask.any_instance.stub(:save).and_return(false)
        post :create, :project_task => {}
        assigns(:project_task).should be_a_new(ProjectTask)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        ProjectTask.any_instance.stub(:save).and_return(false)
        post :create, :project_task => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested project_task" do
        project_task = ProjectTask.create! valid_attributes
        # Assuming there are no other project_tasks in the database, this
        # specifies that the ProjectTask created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ProjectTask.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => project_task.id, :project_task => {'these' => 'params'}
      end

      it "assigns the requested project_task as @project_task" do
        project_task = ProjectTask.create! valid_attributes
        put :update, :id => project_task.id, :project_task => valid_attributes
        assigns(:project_task).should eq(project_task)
      end

      it "redirects to the project_task" do
        project_task = ProjectTask.create! valid_attributes
        put :update, :id => project_task.id, :project_task => valid_attributes
        response.should redirect_to(project_task)
      end
    end

    describe "with invalid params" do
      it "assigns the project_task as @project_task" do
        project_task = ProjectTask.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ProjectTask.any_instance.stub(:save).and_return(false)
        put :update, :id => project_task.id.to_s, :project_task => {}
        assigns(:project_task).should eq(project_task)
      end

      it "re-renders the 'edit' template" do
        project_task = ProjectTask.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ProjectTask.any_instance.stub(:save).and_return(false)
        put :update, :id => project_task.id.to_s, :project_task => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested project_task" do
      project_task = ProjectTask.create! valid_attributes
      expect {
        delete :destroy, :id => project_task.id.to_s
      }.to change(ProjectTask, :count).by(-1)
    end

    it "redirects to the project_tasks list" do
      project_task = ProjectTask.create! valid_attributes
      delete :destroy, :id => project_task.id.to_s
      response.should redirect_to(edit_project_path(@project)) 
    end
  end

end
